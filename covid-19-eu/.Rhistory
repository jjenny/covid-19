n = sapply(rownames(tpm), function(x) split(x, "_")[[1]][2])
head(n)
n = sapply(rownames(tpm), function(x) strsplit(x, "_")[[1]][2])
head(n)
?uniq
??unique
tissue = "amygdala"
data = read.table(paste0("BrainExpAtlas/Ase/mmdiff/out_mmdiff.", tissue, ".ASE.covarSex.prior_flat0.2.poly.out"), row.names=1, header=T)
head(rownames(data))
index = sapply(rownames(data), function(x) which(x == n)[1])
head(index)
rownames(data)[1]
index = sapply(rownames(data), function(x) which(n == x)[1])
head(i)
head(index)
n = rownames(data)[1]
n = sapply(rownames(tpm), function(x) strsplit(x, "_")[[1]][2])
head(n)
n == rownames(data)[1]
which(n == rownames(data)[1])
head(n)
which(n == "Pars2")
which(n == "Pars2")[1]
index
summary(index)
sum(!is.na(index))
index.nona = index[!is.na(index)]
head(index.nona)
n.nona = n[!is.na(index)]
head(n.nona)
n.nona = n[index.nona]
head(n.nona)
tpm.nona = tpm[index.nona]
tpm.nona = tpm[index.nona,]
head(tpm.nona)
rownames(tpm.nona) = n(nona)
rownames(tpm.nona) = n.nona
head(tpm.nona)
phy$data = tpm.nona
phy$species = species
saveRDS(phy, file="ShinyExpressionApp/phy.RDS")
tpm.nona["Avp",]
tpm.nona["Tbp",]
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
setwd("/Volumes/eddyfs01/home/jjenny")
setwd("/Volumes/eddyfs01/home/jjenny/ShinyExpressionApp")
library(shiny)
library(ggplot2)
data <- readRDS("data.RDS")
phy <- readRDS("phy.RDS")
gene.names = c("", sort(rownames(data$means)))
##indices for parental expression values
parental.i = as.vector(sapply(seq(1,length(data$tissues)), function(x) seq((x-1)*24+1, (x-1)*24+12)))
#x-axis labels for expRegions plot
tissues.e = as.vector(sapply(data$tissues, function(x) rep(x, 12)))
species.e = rep(c(rep("BW", 6), rep("PO", 6)), length(data$tissues))
#x-axis labels for cisReg plot
tissues.c = as.vector(sapply(data$tissues, function(x) rep(x, 5)))
species.c = rep(c(rep("BW", 6), rep("PO", 6), rep("F1.BW", 6), rep("F1.PO", 6)), length(data$tissues))
model.c = rep(c("conserved", "cis", "trans", "cis+trans", "compensatory"),length(data$tissues))
bw.light = "#CCAE2C"
bw.dark = "#7F6F23"
po.light = "#0099CC"
po.dark = "#0C6689"
ggplot(cur, aes(x=tissue, y=exp)) +
labs(x = "", y = "Expression (logTPM)") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
scale_fill_manual(values=c(bw.dark, po.dark)) + scale_color_maual(values=c(bw.dark, po.dark)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.4) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
gene = "Avp"
cur = data.frame(exp = as.numeric(data$means[gene,parental.i]), tissue = as.factor(tissues.e), species = as.factor(species.e))
ggplot(cur, aes(x=tissue, y=exp)) +
labs(x = "", y = "Expression (logTPM)") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
scale_fill_manual(values=c(bw.dark, po.dark)) + scale_color_maual(values=c(bw.dark, po.dark)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.4) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
ggplot(cur, aes(x=tissue, y=exp)) +
labs(x = "", y = "Expression (logTPM)") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
scale_fill_manual(values=c(bw.dark, po.dark)) + scale_color_manual(values=c(bw.dark, po.dark)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.4) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
setwd("/Volumes/eddyfs01/home/jjenny")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
gene.names = c("", sort(rownames(data$means)))
##indices for parental expression values
parental.i = as.vector(sapply(seq(1,length(data$tissues)), function(x) seq((x-1)*24+1, (x-1)*24+12)))
#x-axis labels for expRegions plot
tissues.e = as.vector(sapply(data$tissues, function(x) rep(x, 12)))
species.e = rep(c(rep("BW", 6), rep("PO", 6)), length(data$tissues))
#x-axis labels for cisReg plot
tissues.c = as.vector(sapply(data$tissues, function(x) rep(x, 5)))
species.c = rep(c(rep("BW", 6), rep("PO", 6), rep("F1.BW", 6), rep("F1.PO", 6)), length(data$tissues))
model.c = rep(c("conserved", "cis", "trans", "cis+trans", "compensatory"),length(data$tissues))
curModel = data.frame(posterior = data$models[gene,], tissue = as.factor(tissues.c), model = factor(model.c, levels=c("conserved", "cis", "trans", "cis+trans", "compensatory")))
curData = data$means[gene,]
ggplot(data = curModel, aes(x=tissue, y=posterior, fill=model)) + geom_bar(stat="identity", position=position_dodge()) + ylim(0,1),
curModel = data.frame(posterior = data$models[gene,], tissue = as.factor(tissues.c), model = factor(model.c, levels=c("conserved", "cis", "trans", "cis+trans", "compensatory")))
curData = data$means[gene,]
ggplot(data = curModel, aes(x=tissue, y=posterior, fill=model)) +
geom_bar(stat="identity", position=position_dodge()) + ylim(0,1)
ggplot(data = curModel, aes(x=tissue, y=posterior, fill=model)) +
labs(x = "", y = "Posterior Probability") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_bar(stat="identity", position=position_dodge()) + ylim(0,1)
ggplot(data = curModel, aes(x=tissue, y=posterior, fill=model)) +
labs(x = "", y = "Posterior Probability") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_jitter(aes(color = model),position=position_jitter(width=0, height=0), size=1.2)
ggplot(data = curModel, aes(x=tissue, y=posterior, fill=model)) +
labs(x = "", y = "Posterior Probability") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_jitter(aes(color = model),position=position_jitter(width=0, height=0), size=2)
ggplot(data = curModel, aes(x=tissue, y=posterior, fill=model)) +
labs(x = "", y = "Posterior Probability") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_jitter(pch=18, aes(color = model),position=position_jitter(width=0, height=0), size=3)
ggplot(data = curModel, aes(x=tissue, y=posterior, fill=model)) +
labs(x = "", y = "Posterior Probability") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_jitter(pch=23, aes(color = model),position=position_jitter(width=0, height=0), size=3)
ggplot(data = curModel, aes(x=tissue, y=posterior, fill=model)) +
labs(x = "", y = "Posterior Probability") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_jitter(pch=23, aes(color = model),position=position_jitter(width=0, height=0), size=3) +
geom_hline(yintercept=0.75, linetype="dashed")
ggplot(data = curModel, aes(x=tissue, y=posterior, fill=model)) +
labs(x = "", y = "Posterior Probability") + ylim(0, 1) +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_jitter(pch=23, aes(color = model),position=position_jitter(width=0, height=0), size=3) +
geom_hline(yintercept=0.75, linetype="dashed")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
?withProgress
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
runApp("ShinyExpressionApp")
ggplot(cur, aes(x=species, y = exp, fill=species)) +
labs(x = "", y = "Expression (TPM)") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.4) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
cur = data.frame(exp = as.numeric(phy$data[input$gene,]), species = factor(phy$species, levels=c("BW", "NU", "PO", "GO", "LL", "IS")))
ggplot(cur, aes(x=species, y = exp)) +
labs(x = "", y = "Expression (TPM)") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.4) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
cur = data.frame(exp = as.numeric(phy$data[gene,]), species = factor(phy$species, levels=c("BW", "NU", "PO", "GO", "LL", "IS")))
ggplot(cur, aes(x=species, y = exp)) +
labs(x = "", y = "Expression (TPM)") +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.4) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
ggplot(cur, aes(x=species, y = exp)) +
labs(x = "", y = "Expression (TPM)") +
scale_color_viridis(discrete = TRUE, option = "D")+scale_fill_viridis(discrete = TRUE)
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.4) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
ggplot(cur, aes(x=species, y = exp)) +
labs(x = "", y = "Expression (TPM)") +
scale_color_viridis(discrete = TRUE, option = "D")+scale_fill_viridis(discrete = TRUE) +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.4) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
library(viridis)
ggplot(cur, aes(x=species, y = exp)) +
labs(x = "", y = "Expression (TPM)") +
scale_color_viridis(discrete = TRUE, option = "D")+scale_fill_viridis(discrete = TRUE) +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.4) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
library(viridis)
runApp("ShinyExpressionApp")
ggplot(cur, aes(x=species, y = exp)) +
labs(x = "", y = "Expression (TPM)") +
scale_color_viridis(discrete = TRUE, option = "D")+scale_fill_viridis(discrete = TRUE) +
theme_classic() + theme(axis.text.x = element_text(angle = 55, hjust = 1, size=10)) +
geom_boxplot(position=position_dodge(0.4), aes(color=species), width=0.4, size=0.6) +
geom_jitter(alpha=0.8, aes(color = species), position = position_jitterdodge(jitter.width = 0, dodge.width = 0.4), size=1.2)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='peromyscus', token='2B8CBC12DD8BF6DAD1A8FCF3ADF24C30', secret='GgPgSL2Hcs6gZw1RprnStm1PQmc8z8Mz2h7tKhxc')
library(rsconnect)
rsconnect::deployApp("ShinyExpressionApp")
setwd("/Volumes/eddyfs01/home/jjenny")
runApp("ShinyExpressionApp")
setwd("/Volumes/eddyfs01/home/jjenny")
runApp("ShinyExpressionApp")
setwd("/Volumes/eddyfs01/home/jjenny")
library(shiny)
runApp("ShinyExpressionApp")
setwd("~/Desktop/COVID-SHINY/covid-19")
library(dplyr)
library(tidyr)
setwd("~/Desktop/COVID-SHINY/covid-19")
states = read.csv("daily.csv")
intl = read.csv("intl.csv")
capita = read.csv("capita.csv")
states = left_join(states, capita, by="state")
intl = left_join(intl, capita, by="state")
#add index to dates
all_dates = unique(c(states$date, intl$date))
date_index = as.data.frame(cbind(sort(all_dates), seq(1, length(all_dates))))
rownames(date_index) = date_index[,1]
colnames(date_index) = c("date", "index")
states = left_join(states, date_index, by = "date")
intl = left_join(intl, date_index, by = "date")
s = states %>% select(date, state, positive, total, pop, index)
i = intl %>% mutate(total = NA)  %>% select(date, state, positive,total, pop, index)
data = bind_rows(s,i)
#calculate relative data
positive.spread = select(data, date, state, positive) %>% spread(state, positive)
cross500.date = apply(positive.spread[,2:ncol(positive.spread)], 2, function(x) positive.spread[,1][min(which(!is.na(x) & x>500))])
cross500.index = date_index[as.character(cross500.date),2]
cross500.index[is.na(cross500.index)] = max(date_index$index)
cross500 = as.data.frame(unname(cbind(names(cross500.date), cross500.index)))
colnames(cross500) = c("state", "cross")
cross500$cross = as.integer(as.character(cross500$cross))
data.rel = as.data.frame(left_join(data, cross500, by="state") %>% mutate(rel = index-cross))
##get growth rate
tmp = t(positive.spread[,2:ncol(positive.spread)])
growth = rep(NA, length(tmp[,1]))
for (i in 2:ncol(tmp)) {
growth = cbind(growth, (tmp[,i] - tmp[,(i-1)]) / tmp[,(i-1)])
}
growth = t(growth)
rownames(growth) = positive.spread$date
growth = growth[seq(nrow(growth),1),]
#growth = as.data.frame(growth)
growth = as.data.frame(round(growth*100, digits=1))
growth.long = bind_cols(growth, date_index[seq(nrow(date_index),1),]) %>% pivot_longer(cols = seq(1, ncol(growth)))
#calculate relative data percapita
norm.spread = data %>% mutate(norm = positive / (pop / 1000)) %>% select(date, state, norm) %>% spread(state, norm)
cross3.date = apply(norm.spread[,2:ncol(norm.spread)], 2, function(x) norm.spread[,1][min(which(!is.na(x) & x>0.03))])
cross3.index = date_index[as.character(cross3.date),2]
cross3.index[is.na(cross3.index)] = max(date_index$index)
cross3 = as.data.frame(unname(cbind(names(cross3.date), cross3.index)))
colnames(cross3) = c("state", "cross")
cross3$cross = as.integer(as.character(cross3$cross))
data.relCapita = as.data.frame(left_join(data, cross3, by="state") %>% mutate(rel = index-cross))
#bin states
recent = states[states$index == max(data$index),]
recent.ordered = recent[order(recent$positive, decreasing = T),]
states = c()
states$over3000 = recent.ordered[recent.ordered$positive>=3000 & !is.na(recent.ordered$positive),]$state
states$over1000 = recent.ordered[recent.ordered$positive>=1000  & recent.ordered$positive < 3000 & !is.na(recent.ordered$positive),]$state
states$over500 = recent.ordered[recent.ordered$positive>=500  & recent.ordered$positive < 1000 & !is.na(recent.ordered$positive),]$state
states$over0 = recent.ordered[recent.ordered$positive<500 & !is.na(recent.ordered$positive),]$state
##Make data tables
dataAbs = c()
dataAbs$noNorm = data %>% mutate(plot = positive) %>% mutate(cases = plot) %>% select(date_label = date, date = index, state, plot, cases)
dataAbs$normByTotalCases = data %>% mutate(plot = positive/total)  %>% mutate(cases = prettyNum(plot, digits=2)) %>% select(date_label = date, date = index, state, plot, cases)
dataAbs$normByPop = data %>% mutate(plot = positive/(pop/1000)) %>% mutate(cases = prettyNum(plot, digits=3)) %>% select(date_label = date, date = index, state, plot, cases)
dataAbs$growth = growth.long %>% mutate(cases = prettyNum(value, digits=3)) %>% select(date_label = date, date = index, state = name, plot = value, cases) %>% as.data.frame()
dataRel = c()
dataRel$noNorm = data.rel %>% mutate(plot = positive) %>% mutate(cases = plot) %>% select(date = rel, state, plot, cases)
dataRel$normByPop = data.relCapita %>% mutate(plot = positive/(pop/1000)) %>% mutate(cases = prettyNum(plot, digits=3)) %>% select(date = rel, state, plot, cases)
##Government response
response_data = read.csv("response.csv")
response.rel = left_join(response_data, date_index, by="date") %>% left_join(cross500, by="state") %>% mutate(rel = index-cross) %>% select(state, response, date = rel)
response.relCapita = left_join(response_data, date_index, by="date") %>% left_join(cross3, by="state") %>% mutate(rel = index-cross) %>% select(state, response, date = rel)
response = c()
response$abs = left_join(response_data, date_index) %>% select(state, response, date = index)
response$rel = response.rel
response$relCapita = response.relCapita
#Save data
saveRDS(states, file="states.RDS")
saveRDS(dataAbs, file="dataAbs.RDS")
saveRDS(dataRel, file="dataRel.RDS")
saveRDS(response, file="response.RDS")
saveRDS(growth, file="growth.RDS")
library(dplyr)
library(tidyr)
states = read.csv("states-daily.csv")
capita = read.csv("capita.csv", row.names=1)
capita = capita / 1000
#add index to dates
states = left_join(states, date_index, by = "date")
data = states
#calculate relative data
total.spread = select(data, date, state, total) %>% spread(state, total)
totalTestsPerformed = total.spread[nrow(total.spread),2:ncol(total.spread)]
numPerformedToday = total.spread[nrow(total.spread),2:ncol(total.spread)] - total.spread[nrow(total.spread)-1,2:ncol(total.spread)]
numPerformedDaily = c()
for (i in (nrow(total.spread)-6):(nrow(total.spread)-1)) {
t = total.spread[(i+1),2:ncol(total.spread)] - total.spread[i,2:ncol(total.spread)]
numPerformedDaily = rbind(numPerformedDaily, t)
}
totalTestsPerformed.perCapita = totalTestsPerformed / capita[colnames(totalTestsPerformed),1]
numPerformedToday.perCapita = numPerformedToday / capita[colnames(numPerformedToday),1]
tests.table = t(rbind(numPerformedToday,totalTestsPerformed,round(totalTestsPerformed.perCapita, digits=2)))
colnames(tests.table) = c("Tests performed today", "Total tests performed", "Total tests per capita (1,000)")
tests.table = as.data.frame(tests.table)
saveRDS(tests.table, file="tests.RDS")
shiny::runApp()
rsconnect::deployApp('./', account="uscovid-19")
setwd("~/Desktop/COVID-SHINY/covid-19-sa")
library(dplyr)
library(tidyr)
setwd("~/Desktop/COVID-SHINY/covid-19-sa")
##Input Files
jhu.confirmed = "/Users/jennychen/Desktop/COVID-SHINY/data/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
population = "population.country.csv"
response_data = read.csv("response.csv")
jhu = read.csv(jhu.confirmed)
pop = read.csv(population) %>% select(Country.Region, pop)
##pull out data for states of interest
states = c("Uruguay", "Argentina", "Ecuador", "Chile", "Brazil", "Peru",
"Bolivia", "Paraguay", "Colombia", "Venezuela")
jhu.states = jhu[jhu$Country.Region %in% states & (jhu$Province.State == "" | as.character(jhu$Province.State) == as.character(jhu$Country.Region)),c(2,5:ncol(jhu))]
##check you have everything
length(states)
nrow(jhu.states)
##add intl regions
jhu.Hubei = jhu[jhu[,1]=="Hubei",c(2,5:ncol(jhu))]
jhu.Hubei$Country.Region = "Hubei"
jhu.Italy = jhu[jhu[,2]=="Italy",c(2,5:ncol(jhu))]
jhu.Spain = jhu[jhu[,2]=="Spain",c(2,5:ncol(jhu))]
jhu.US = jhu[jhu[,2]=="US",c(2,5:ncol(jhu))]
jhu.states = rbind(jhu.states, jhu.Hubei, jhu.Italy, jhu.Spain, jhu.US)
state_es = cbind(c(states, "Hubei", "Italy", "Spain", "US"), c("Uruguay", "Argentina", "Ecuador", "Chile", "Brasil", "Perú",
"Bolivia", "Paraguay", "Colombia", "Venezuela", "Hubei", "Italia", "España", "EEUU"))
colnames(state_es) = c("state", "state_es")
state_es = as.data.frame(state_es)
rownames(state_es) = state_es[,1]
##reformat dates
dates = read.csv(jhu.confirmed, header=F)
dates = dates[1,5:ncol(dates)]
date_index = mutate(as.data.frame(t(dates)), index=row_number()) %>% select(date=1, index=index)
date_index$date = sapply(date_index$date, function(x) gsub("/", ".", x))
##get growth rate
tmp = jhu.states[,2:ncol(jhu.states)]
growth = rep(NA, length(tmp[,1]))
for (i in 2:ncol(tmp)) {
growth = cbind(growth, (tmp[,i] - tmp[,(i-1)]) / tmp[,(i-1)])
}
growth = t(growth)
colnames(growth) = state_es[as.character(jhu.states[,1]),2]
rownames(growth) = sapply(colnames(jhu.states)[2:ncol(jhu.states)], function(x) gsub("X", "", x))
growth = growth[seq(nrow(growth),1),]
growth = as.data.frame(round(growth*100, digits=1))
##make data table with absolute dates
jhu.tmp = pivot_longer(jhu.states, colnames(jhu.states)[2:ncol(jhu.states)]) %>% select(state=Country.Region, date = name, positive = value)
jhu.tmp$date = sapply(jhu.tmp$date, function(x) gsub("X", "", x))
jhu.abs = left_join(jhu.tmp, date_index)
jhu.abs = left_join(jhu.abs, select(pop, state = Country.Region, pop))
jhu.abs = as.data.frame(jhu.abs)
#calculate relative data
cross500 = apply(jhu.states[,2:ncol(jhu.states)], 1, function(x) min(which(!is.na(x) & x>500)))
cross500[cross500==Inf] = max(date_index$index)
cross500 = as.data.frame(cbind(as.character(jhu.states[,1]), cross500)) %>% select(state = V1, cross = cross500)
cross500$cross = as.numeric(as.character(cross500$cross))
jhu.rel = as.data.frame(left_join(jhu.abs, cross500, by="state") %>% mutate(rel = index-cross))
#calculate relative data percapita
jhu.withPop = inner_join(pop, jhu.states, by="Country.Region")
jhu.normPop = c()
for (i in 1:nrow(jhu.withPop)) {
jhu.normPop = rbind(jhu.normPop, jhu.withPop[i,3:ncol(jhu.withPop)] / jhu.withPop[i,2])
}
cross3 = apply(jhu.normPop, 1, function(x) min(which(!is.na(x) & x>10)))
cross3[cross3==Inf] = max(cross3[cross3<Inf])
cross3 = as.data.frame(cbind(as.character(jhu.withPop[,1]), cross3)) %>% select(state = V1, cross = cross3)
cross3$cross = as.numeric(as.character(cross3$cross))
jhu.relCapita = as.data.frame(left_join(jhu.abs, cross3, by="state") %>% mutate(rel = index-cross))
#bin states
intl = c("Hubei", "Italy", "Spain", "US")
recent = jhu.states[!(jhu.states[,1] %in% intl),ncol(jhu.states),]
names(recent) = jhu.states[!(jhu.states[,1] %in% intl),1]
recent.ordered = recent[order(recent, decreasing = T)]
###CUSTOMIZE THIS###
states = c()
states$bin1 = state_es[names(recent.ordered[recent.ordered>=500]),2]
states$bin2 = state_es[names(recent.ordered[recent.ordered<500]),2]
dataAbs = c()
dataAbs$noNorm = inner_join(jhu.abs, state_es) %>% mutate(plot = positive) %>% mutate(cases = plot) %>%
select(date_label = date, date = index, state = state_es, plot, cases)
dataAbs$normByPop = inner_join(jhu.abs, state_es) %>% mutate(plot = positive/pop) %>%
mutate(cases = prettyNum(plot, digits=3)) %>% select(date_label = date, date = index, state = state_es, plot, cases)
dataRel = c()
dataRel$noNorm = inner_join(jhu.rel, state_es) %>% mutate(plot = positive) %>%
mutate(cases = plot) %>% select(date = rel, state = state_es, plot, cases)
dataRel$normByPop= inner_join(jhu.relCapita, state_es) %>% mutate(plot = positive/pop) %>%
mutate(cases = prettyNum(plot, digits=3)) %>% select(date = rel, state = state_es, plot, cases)
##add min,max dates for visualization
##Government response
response.rel = inner_join(response_data, state_es) %>%
left_join(date_index, by="date") %>% left_join(cross500, by="state") %>%
mutate(rel = index-cross) %>% select(state = state_es, response, date = rel)
response.relCapita = inner_join(response_data, state_es) %>%
left_join(date_index, by="date") %>% left_join(cross3, by="state") %>%
mutate(rel = index-cross) %>% select(state = state_es, response, date = rel)
response = c()
response$abs = inner_join(response_data, state_es) %>%
left_join(date_index) %>% select(state = state_es, response, date = index)
response$rel = response.rel
response$relCapita = response.relCapita
#Save data
saveRDS(states, file="states.RDS")
saveRDS(dataAbs, file="dataAbs.RDS")
saveRDS(dataRel, file="dataRel.RDS")
saveRDS(response, file="response.RDS")
saveRDS(growth,file="growth.RDS")
rsconnect::deployApp('./', account="uscovid-19")
rsconnect::deployApp('./', account="uscovid-19")
setwd("~/Desktop/COVID-SHINY/covid-19-eu")
library(dplyr)
library(tidyr)
setwd("~/Desktop/COVID-SHINY/covid-19-eu")
###UPDATE THIS
##Input Files
jhu.confirmed = "~/Desktop/COVID-SHINY/data/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
population = "pop.csv"
response_data = read.csv("response.csv")
jhu = read.csv(jhu.confirmed)
pop = read.csv(population)
###UPDATE THIS
##pull out data for states of interest
states = c("Austria", "Belgium", "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Spain", "Sweden", "Switzerland", "United Kingdom")
jhu.states = jhu[jhu$Country.Region %in% states & (jhu$Province.State == "" | as.character(jhu$Province.State) == as.character(jhu$Country.Region)),c(2,5:ncol(jhu))]
##check you have everything
length(states)
nrow(jhu.states)
##If you want to compare to Hubei
jhu.Hubei = jhu[jhu[,1]=="Hubei",c(2,5:ncol(jhu))]
jhu.Hubei$Country.Region = "Hubei"
jhu.US = jhu[jhu[,2]=="US",c(2,5:ncol(jhu))]
jhu.states = rbind(jhu.states, jhu.Hubei, jhu.US)
##reformat dates
dates = read.csv(jhu.confirmed, header=F)
dates = dates[1,5:ncol(dates)]
date_index = mutate(as.data.frame(t(dates)), index=row_number()) %>% select(date=1, index=index)
date_index$date = sapply(date_index$date, function(x) gsub("/", ".", x))
##make data table with absolute dates
jhu.tmp = pivot_longer(jhu.states, colnames(jhu.states)[2:ncol(jhu.states)]) %>% select(state=Country.Region, date = name, positive = value)
jhu.tmp$date = sapply(jhu.tmp$date, function(x) gsub("X", "", x))
jhu.abs = left_join(jhu.tmp, date_index)
jhu.abs = left_join(jhu.abs, select(pop, state = Country.Region, pop))
jhu.abs = as.data.frame(jhu.abs)
##get growth rate
tmp = jhu.states[,2:ncol(jhu.states)]
growth = rep(NA, length(tmp[,1]))
for (i in 2:ncol(tmp)) {
growth = cbind(growth, (tmp[,i] - tmp[,(i-1)]) / tmp[,(i-1)])
}
growth = t(growth)
colnames(growth) = jhu.states[,1]
rownames(growth) = sapply(colnames(jhu.states)[2:ncol(jhu.states)], function(x) gsub("X", "", x))
growth = growth[seq(nrow(growth),1),]
growth = as.data.frame(round(growth*100, digits=1))
#calculate relative data
cross500 = apply(jhu.states[,2:ncol(jhu.states)], 1, function(x) min(which(!is.na(x) & x>500)))
cross500[cross500==Inf] = max(cross500[cross500<Inf])
cross500 = as.data.frame(cbind(as.character(jhu.states[,1]), cross500)) %>% select(state = V1, cross = cross500)
cross500$cross = as.numeric(as.character(cross500$cross))
jhu.rel = as.data.frame(left_join(jhu.abs, cross500, by="state") %>% mutate(rel = index-cross))
#calculate relative data percapita
jhu.withPop = left_join(pop, jhu.states, by="Country.Region")
jhu.normPop = c()
for (i in 1:nrow(jhu.withPop)) {
jhu.normPop = rbind(jhu.normPop, jhu.withPop[i,3:ncol(jhu.withPop)] / (jhu.withPop[i,2] / 1000))
}
cross3 = apply(jhu.normPop, 1, function(x) min(which(!is.na(x) & x>0.03)))
cross3[cross3==Inf] = max(cross3[cross3<Inf])
cross3 = as.data.frame(cbind(as.character(jhu.withPop[,1]), cross3)) %>% select(state = V1, cross = cross3)
cross3$cross = as.numeric(as.character(cross3$cross))
jhu.relCapita = as.data.frame(left_join(jhu.abs, cross3, by="state") %>% mutate(rel = index-cross))
#bin states
recent = jhu.states[jhu.states[,1] != "Hubei" & jhu.states[,1] != "US",ncol(jhu.states)]
names(recent) = jhu.states[jhu.states[,1] != "Hubei"  & jhu.states[,1] != "US",1]
recent.ordered = recent[order(recent, decreasing = T)]
###CUSTOMIZE THIS###
states = c()
states$bin1 = names(recent.ordered[recent.ordered>=10000])
states$bin2 = names(recent.ordered[recent.ordered>=2000 & recent.ordered<10000])
states$bin3 = names(recent.ordered[recent.ordered<2000])
##Make data tables
dataAbs = c()
dataAbs$noNorm = jhu.abs %>% mutate(plot = positive) %>% mutate(cases = plot) %>% select(date_label = date, date = index, state, plot, cases)
dataAbs$normByPop = jhu.abs %>% mutate(plot = positive/(pop/1000)) %>% mutate(cases = prettyNum(plot, digits=3)) %>% select(date_label = date, date = index, state, plot, cases)
dataRel = c()
dataRel$noNorm = jhu.rel %>% mutate(plot = positive) %>% mutate(cases = plot) %>% select(date = rel, state, plot, cases)
dataRel$normByPop = jhu.relCapita %>% mutate(plot = positive/(pop/1000)) %>% mutate(cases = prettyNum(plot, digits=3)) %>% select(date = rel, state, plot, cases)
#dataRelCapita = c()
#dataRelCapita$noNorm = jhu.relCapita %>% mutate(plot = positive) %>% mutate(cases = plot) %>% select(date = rel, state, plot, cases)
#dataRelCapita$normByPop = jhu.relCapita %>% mutate(plot = positive/(pop/100000)) %>% mutate(cases = prettyNum(plot, digits=3)) %>% select(date = rel, state, plot, cases)
##Government response
response.rel = left_join(response_data, date_index, by="date") %>% left_join(cross500, by="state") %>% mutate(rel = index-cross) %>% select(state, response, date = rel)
response.relCapita = left_join(response_data, date_index, by="date") %>% left_join(cross3, by="state") %>% mutate(rel = index-cross) %>% select(state, response, date = rel)
response = c()
response$abs = left_join(response_data, date_index) %>% select(state, response, date = index)
response$rel = response.rel
response$relCapita = response.relCapita
#Save data
saveRDS(states, file="states.RDS")
saveRDS(dataAbs, file="dataAbs.RDS")
saveRDS(dataRel, file="dataRel.RDS")
saveRDS(response, file="response.RDS")
saveRDS(growth,file="growth.RDS")
runApp()
rsconnect::deployApp('./', account="uscovid-19")
